#SPDX-FileCopyrightText: 2025 Intevation GmbH
#SPDX-License-Identifier: AGPL-3.0-or-later
#

name: 'CSAF Advisory Provider'
description: 'Creates the CSAF documents to create a CSAF trusted provider'
author:

inputs:
  csaf_version:
    description: The version of the gocsaf/csaf tool suite
    default: 3.3.0
    required: false
  secvisogram_version:
    description: Version of the secvisogram validator service
    default: 2.0.7
    required: false
  publisher_category:
    description: The category of the CSAF Publisher
    default: vendor
    required: false
  publisher_name:
    description: Name of the CSAF Publisher
    required: true
  publisher_namespace:
    description: URL of the CSAF Publisher
    required: true
  publisher_issuing_authority:
    description: Description of the Issuing Authority of the CSAF Publisher
    required: true
  publisher_contact_details:
    description: Contact details of the CSAF Publisher
    required: true
  source_csaf_documents:
    description: Path to the CSAF source documents
    default: csaf_documents/
    required: false
  openpgp_use_signatures:
    description: Use the signtures files placed along the advisory files with `.asc` file ending
    default: true
    required: false
  openpgp_key_email_address:
    description: If the OpenPGP is to be generated on the fly, this is the associated e-mail address
    default: csaf@example.invalid
    required: false
  openpgp_key_real_name:
    description: If the OpenPGP is to be generated on the fly, this is the associated real name
    default: Example CSAF Publisher
    required: false
  openpgp_key_type:
    description: If the OpenPGP is to be generated on the fly, this is the key type
    default: RSA
    required: false
  openpgp_key_length:
    description: If the OpenPGP is to be generated on the fly, this is the key length in bits
    default: 4096
    required: false
  openpgp_secret_key:
    description: The armored OpenPGP secret key, provided as GitHub secret
    required: false
  openpgp_public_key:
    description: The armored OpenPGP public key, provided as GitHub secret
    required: false
  generate_index_files:
    description: Generate index.html files in .well-known/csaf/ for easier navigation in the browser. Otherwise GitHub will give 404s when accessing the directories directly.
    default: false
    required: false
  target_branch:
    description: The target branch to push the resulting data to
    default: gh-pages
    required: false

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: ${{ inputs.source_csaf_documents }}
        path: source

    - name: Configure git
      id: configure_git
      shell: bash
      run: |
        cd "${GITHUB_WORKSPACE}/source" || exit
        # inspired by https://github.com/ChristopherDavenport/create-ghpages-ifnotexists/blob/main/action.yml but with different committer
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        gh_pages_exists=$(git ls-remote --heads origin "${{ inputs.target_branch }}")
        if [[ -z "$gh_pages_exists" ]]; then
          echo "Create branch ${{ inputs.target_branch }}"
          previous_branch=$(git rev-parse --abbrev-ref HEAD)
          git checkout --orphan "${{ inputs.target_branch }}"  # empty branch
          git reset --hard  # remove any files
          git commit --allow-empty --message "Create empty branch ${{ inputs.target_branch }}"
          git push origin "${{ inputs.target_branch }}"
          git checkout "$previous_branch"
        fi

    - name: Checkout target branch
      uses: actions/checkout@v4
      with:
        ref: "${{ inputs.target_branch }}"
        # make a checkout in different directory. Not possible in parallel directory (permissions). A subdirectory may collide with existing directory names
        path: target

    - name: Get GitHub Pages URL
      id: pagesurl
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
        echo "$url"
        # remove the trailing slash to prevent urls containing '//' in provider-metadata.json
        echo "url=${url%/}" >> "$GITHUB_OUTPUT"

    - name: Install nginx and node
      shell: bash
      run: |
        DEBIAN_FRONTEND=noninteractive sudo -E apt-get update -qq
        # npm and hunspell for secvisogram, tree for pages.sh
        DEBIAN_FRONTEND=noninteractive sudo -E apt-get install -y nginx fcgiwrap npm hunspell wait-for-it tree

    - name: Setup nginx
      shell: bash
      run: |
        sudo cp "${{ github.action_path }}/nginx/fcgiwrap.conf" /etc/nginx/fcgiwrap.conf
        sudo cp "${{ github.action_path }}/nginx/default.conf" /etc/nginx/sites-enabled/default
        sudo systemctl start fcgiwrap.service
        sudo systemctl start fcgiwrap.socket
        sudo systemctl reload-or-restart nginx.service
        wait-for-it localhost:80

    - name: Get CSAF tools
      shell: bash
      run: |
        wget "https://github.com/gocsaf/csaf/releases/download/v${{ inputs.csaf_version }}/csaf-${{ inputs.csaf_version }}-gnulinux-amd64.tar.gz"
        tar -xzf "csaf-${{ inputs.csaf_version }}-gnulinux-amd64.tar.gz"

    - name: Install secvisogram
      shell: bash
      run: |
        wget "https://github.com/secvisogram/csaf-validator-service/archive/refs/tags/v${{ inputs.secvisogram_version }}.tar.gz" -O "secvisogram-csaf-validator-service-${{ inputs.secvisogram_version }}.tar.gz"
        tar -xzf "secvisogram-csaf-validator-service-${{ inputs.secvisogram_version }}.tar.gz"

    - name: Create or process OpenPGP key
      shell: bash
      run: |
        sudo mkdir -p /etc/csaf/
        if [[ -n "${{ inputs.openpgp_public_key }}" ]]; then  # using signed advisories or provided public/private key
          echo "${{ inputs.openpgp_public_key }}" | sudo tee /etc/csaf/openpgp_public.asc > /dev/null
        fi
        if [[ -n "${{ inputs.openpgp_secret_key }}" ]]; then  # using public/private key
          echo "${{ inputs.openpgp_secret_key }}" | sudo tee /etc/csaf/openpgp_private.asc > /dev/null
        elif [[ "${{ inputs.openpgp_use_signatures }}" != "true" ]]; then  # generate on the fly
          # based on https://serverfault.com/a/960673/217116
          cat >keydetails <<EOF
              Key-Type: ${{ inputs.openpgp_key_type }}
              Key-Length: ${{ inputs.openpgp_key_length }}
              Subkey-Type: ${{ inputs.openpgp_key_type }}
              Subkey-Length: ${{ inputs.openpgp_key_length }}
              Name-Real: ${{ inputs.openpgp_key_real_name }}
              Name-Email: ${{ inputs.openpgp_key_email_address }}
              Expire-Date: 0
              %no-ask-passphrase
              %no-protection
              %commit
        EOF
          gpg --batch --gen-key keydetails
          # check if the key works
          echo foobar | gpg -e -a -r "${{ inputs.openpgp_key_email_address }}"
          # save at expected destinations
          gpg --armor --export "${{ inputs.openpgp_key_email_address }}" | sudo tee /etc/csaf/openpgp_public.asc > /dev/null
          gpg --armor --export-secret-keys "${{ inputs.openpgp_key_email_address }}" | sudo tee /etc/csaf/openpgp_private.asc > /dev/null
        fi

    - name: Configure csaf_provider
      shell: bash
      run: |
        set -x
        # for validations.db
        sudo mkdir -p /var/lib/csaf/
        sudo cp "${{ github.action_path }}/csaf_provider/config.toml" /etc/csaf/config.toml
        sudo chgrp www-data /etc/csaf/config.toml
        sudo chmod g+r,o-rwx /etc/csaf/config.toml
        web_folder=$(readlink -f "$GITHUB_WORKSPACE/target")
        internal_output=$(mktemp -d)
        mkdir -p "$web_folder"
        # remove all previous existing data, prepare for a new csaf_provider structure
        rm -rf "${web_folder}/.well-known/csaf/"
        sudo chgrp -R www-data "$web_folder" "$internal_output" /var/lib/csaf/
        sudo chmod -R g+rw "$web_folder" "$internal_output" /var/lib/csaf/
        sudo chmod +x "$internal_output"
        # make all parents of $web_folder accessible to www-data
        i="$web_folder"
        while [[ "$i" != /home ]]; do sudo chmod o+rx "$i"; i="$(dirname "$i")"; done
        # make all parents of $internal_output accessible to www-data
        i="$internal_output"
        while [[ "$i" != /tmp ]]; do sudo chmod o+rx "$i"; i="$(dirname "$i")"; done
        sudo sed -ri \
          -e "s#^folder *=.*#folder = \"$internal_output\"#" \
          -e "s#^web *=.*#web = \"$web_folder\"#" \
          -e "s#^category *=.*#category = \"${{ inputs.publisher_category }}\"#" \
          -e "s#^name *=.*#name = \"${{ inputs.publisher_name }}\"#" \
          -e "s#^namespace *=.*#namespace = \"${{ inputs.publisher_namespace }}\"#" \
          -e "s#^issuing_authority *=.*#issuing_authority = \"${{ inputs.publisher_issuing_authority }}\"#" \
          -e "s#^contact_details *=.*#contact_details = \"${{ inputs.publisher_contact_details }}\"#" \
          -e "s#^\#?canonical_url_prefix *=.*#canonical_url_prefix = \"${{ steps.pagesurl.outputs.url }}\"#" \
          -e "s/^#?upload_signature *?=.*/upload_signature = ${{ inputs.openpgp_use_signatures }}/" \
          /etc/csaf/config.toml
        sudo cat /etc/csaf/config.toml
        sudo mkdir -p /usr/lib/cgi-bin/
        sudo cp "csaf-${{ inputs.csaf_version }}-gnulinux-amd64/bin-linux-amd64/csaf_provider" /usr/lib/cgi-bin/csaf_provider.go
        curl -f http://127.0.0.1/cgi-bin/csaf_provider.go/api/create  -H 'X-Csaf-Provider-Auth: $2a$10$QL0Qy7CeOSdWDrdw6huw0uFk2szqxMssoihVn64BbZEPzqXwPThgu'
        # has no proper exit codes currently: https://github.com/gocsaf/csaf/issues/669
        # "./csaf-${{ inputs.csaf_version }}-gnulinux-amd64/bin-linux-amd64/csaf_uploader" --action create --url http://127.0.0.1/cgi-bin/csaf_provider.go --password password

    - name: Setup secvisogram
      shell: bash
      run: |
        pushd "csaf-validator-service-${{ inputs.secvisogram_version }}" || exit
        npm ci
        nohup npm run dev < /dev/null &> secvisogram.log &
        secvisogram_pid=$!
        popd || exit
        echo $secvisogram_pid > secvisogram.pid
        wait-for-it localhost:8082

    - name: Upload documents
      shell: bash
      run: |
        set -x
        find "$GITHUB_WORKSPACE/source/${{ inputs.source_csaf_documents }}" -type f -name '*.json' -print0 | while IFS= read -r -d $'\0' file; do
          echo "Uploading $file"
          # we cannot quote around the parameter expansion of openpgp_use_signatures as then csaf_upload would get an empty string as parameter if openpgp_use_signatures is not set
          # shellcheck disable=SC2046
          "./csaf-${{ inputs.csaf_version }}-gnulinux-amd64/bin-linux-amd64/csaf_uploader" \
            --action upload --url http://127.0.0.1/cgi-bin/csaf_provider.go --password password \
            "$file" $( [[ "${{ inputs.openpgp_use_signatures }}" == "true" ]] && echo "--external_signed" )
        done
        pushd "${GITHUB_WORKSPACE}/target" || exit
        generate_index_files=${{ inputs.generate_index_files }} "${{ github.action_path }}/pages.sh"
        popd || exit

    - name: Commit changes
      # Use https://github.com/stefanzweifel/git-auto-commit-action for commit and push
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: Update CSAF advisories
        repository: target
        add_options: -A
